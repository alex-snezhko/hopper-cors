/**
 * @module HopperCors: An extension to Hopper allowing handling of CORS requests.
 * 
 * Version 0.1.0
 */

import Map from "map"
import List from "list"
import String from "string"
import Option from "option"
import Hopper from "./hopper"

/**
 * Represents possible values for specifying allowed Origins for requests.
 * 
 * `Origins` can be used to give a list of concrete origins allowed, or `"*"`
 * for all origins.
 * 
 * `AllowOriginPredicate` can be used to enable dynamic origin validation; it
 * takes a function where the argument is the origin name and the returned
 * value is `true` if that origin should be allowed, or `false` otherwise.
 */
export enum AllowOriginType {
  Origins(List<String>),
  AllowOriginPredicate(String -> Bool),
}

/**
 * Represents an option to configure CORS middleware with, corresponding to
 * the `Access-Control-Allow-...` HTTP headers.
 * 
 * `AllowOrigin` corresponds to the `Access-Control-Allow-Origin` header for
 * specifying allowed origins; default value: `Origins(["*"])`.
 * 
 * `AllowMethods` corresponds to the `Access-Control-Allow-Methods` header for
 * preflight requests; default value: `[GET, HEAD, PUT, PATCH, POST, DELETE]`.
 * 
 * `AllowHeaders` corresponds to the `Access-Control-Allow-Headers` header for
 * preflight requests for specifying which headers can be sent for the actual
 * request; default value: `["*"]`
 * 
 * `ExposeHeaders` corresponds to the `Access-Control-Expose-Headers` header
 * for specifying which response headers are exposed to the client; default
 * value is `[]`
 * 
 * `MaxAge` corresponds to the `Access-Control-Max-Age` header for specifying
 * how long the response from preflight requests should be cached; unset by
 * default.
 */
export enum CorsOption {
  AllowOrigin(AllowOriginType),
  AllowMethods(List<Hopper.Method>),
  AllowHeaders(List<String>),
  ExposeHeaders(List<String>),
  MaxAge(Number),
}

record OptionInternal {
  allowOrigin: AllowOriginType,
  allowMethods: List<Hopper.Method>,
  allowHeaders: List<String>,
  exposeHeaders: List<String>,
  maxAge: Option<Number>
}

let originHeaders = (allowOrigin, reqOrigin) => {
  let acao = "Access-Control-Allow-Origin"
  let vo = ("Vary", "Origin")
  match (allowOrigin) {
    Origins(vals) when List.contains("*", vals) => [(acao, "*")],
    Origins(vals) when List.contains(reqOrigin, vals) => {
      [(acao, reqOrigin), vo]
    },
    AllowOriginPredicate(fn) => {
      if (fn(reqOrigin)) [(acao, reqOrigin), vo] else [vo]
    },
    _ => []
  }
}

let preflightHeaders = (options, reqOrigin) => {
  // TODO add allow credential if WAGI gets auth support
  let allowedMethods = List.map(Hopper.methodToString, options.allowMethods)
  let headers = [
    ("Access-Control-Allow-Methods", List.join(",", allowedMethods)),
    ("Access-Control-Allow-Headers", List.join(",", options.allowHeaders)),
    ...originHeaders(options.allowOrigin, reqOrigin)
  ]

  let headers = match (options.maxAge) {
    Some(maxAge) => [("Access-Control-Max-Age", toString(maxAge)), ...headers],
    None => headers
  }
  Map.fromList(headers)
}

let normalHeaders = (options, reqOrigin) => {
  let headers = originHeaders(options.allowOrigin, reqOrigin)
  let aceh = "Access-Control-Expose-Headers"
  match (options.exposeHeaders) {
    [] => headers,
		_ => [(aceh, List.join(",", options.exposeHeaders)), ...headers]
	}
}

let getOptions = optionsList => {
  let (o, m, h, eh, ma) = List.reduce(
    ((o, m, h, eh, ma), this) => {
      match (this) {
        AllowOrigin(x) => (Option.or(o, Some(x)), m, h, eh, ma),
        AllowMethods(x) => (o, Option.or(m, Some(x)), h, eh, ma),
        AllowHeaders(x) => (o, m, Option.or(h, Some(x)), eh, ma),
        ExposeHeaders(x) => (o, m, h, Option.or(eh, Some(x)), ma),
        MaxAge(x) => (o, m, h, eh, Option.or(ma, Some(x))),
      }
    },
    (None, None, None, None, None),
    optionsList
  )

  {
    allowOrigin: Option.unwrapWithDefault(Origins(["*"]), o),
    allowMethods: Option.unwrapWithDefault([
      Hopper.Get,
      Hopper.Head,
      Hopper.Put,
      Hopper.Patch,
      Hopper.Post,
      Hopper.Delete
    ], m),
    allowHeaders: Option.unwrapWithDefault(["*"], h),
    exposeHeaders: Option.unwrapWithDefault([], eh),
    maxAge: ma
  }
}

/**
 * Middleware for enabling CORS requests.
 * 
 * @param options: A list of `CorsOption`s to configure the CORS middleware with
 * @returns A middleware that enables handling of CORS requests on routes
 */
export let withCors = options => next => req => {
  Hopper.log(Hopper.method(req))
  Hopper.log(Map.toList(Hopper.headers(req)))
  // CORS requests will have an "Origin" header
  let reqOrigin = Hopper.header("Origin", req)
  match (reqOrigin) {
    Some(reqOrigin) => {
      let options = getOptions(options)
      if (Hopper.method(req) == Hopper.Options) {
        // handle CORS preflight request
        let headers = preflightHeaders(options, reqOrigin)
        Hopper.response(Hopper.NoContent, headers, "")
      } else {
        let res = next(req)
        let resHeaders = Hopper.headers(res)
        let newHeaders = normalHeaders(options, reqOrigin)
        List.forEach(((key, val)) => Map.set(key, val, resHeaders), newHeaders)
        Hopper.newHeaders(resHeaders, res)
      }
    },
    None => next(req)
  }
}
